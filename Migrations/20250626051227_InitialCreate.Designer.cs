// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OmnitakSupportHub;

#nullable disable

namespace OmnitakSupportHub.Migrations
{
    [DbContext(typeof(OmnitakContext))]
    [Migration("20250626051227_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OmnitakSupportHub.Models.AuditLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TargetID")
                        .HasColumnType("int");

                    b.Property<string>("TargetType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.HasIndex("UserID");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.ChatMessage", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemMessage")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MessageID");

                    b.HasIndex("TicketID");

                    b.HasIndex("UserID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("TicketID");

                    b.HasIndex("UserID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.KnowledgeBase", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleID"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("HelpfulCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ArticleID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("KnowledgeBase");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.PasswordReset", b =>
                {
                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserID");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<bool>("CanApproveUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageKnowledgeBase")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageTeams")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageTickets")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewAllTickets")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewReports")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            CanApproveUsers = true,
                            CanManageKnowledgeBase = true,
                            CanManageTeams = true,
                            CanManageTickets = true,
                            CanViewAllTickets = true,
                            CanViewReports = true,
                            Description = "Full system access including user approval and system management",
                            IsSystemRole = true,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleID = 2,
                            CanApproveUsers = true,
                            CanManageKnowledgeBase = true,
                            CanManageTeams = true,
                            CanManageTickets = true,
                            CanViewAllTickets = true,
                            CanViewReports = true,
                            Description = "Can manage support teams and approve users",
                            IsSystemRole = true,
                            RoleName = "Support Manager"
                        },
                        new
                        {
                            RoleID = 3,
                            CanApproveUsers = false,
                            CanManageKnowledgeBase = true,
                            CanManageTeams = false,
                            CanManageTickets = true,
                            CanViewAllTickets = true,
                            CanViewReports = false,
                            Description = "Can manage and resolve assigned tickets",
                            IsSystemRole = true,
                            RoleName = "Support Agent"
                        },
                        new
                        {
                            RoleID = 4,
                            CanApproveUsers = false,
                            CanManageKnowledgeBase = false,
                            CanManageTeams = false,
                            CanManageTickets = false,
                            CanViewAllTickets = false,
                            CanViewReports = false,
                            Description = "Can create and view own tickets",
                            IsSystemRole = true,
                            RoleName = "End User"
                        });
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.SupportTeam", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TeamLeadID")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TeamID");

                    b.HasIndex("TeamLeadID");

                    b.HasIndex("TeamName")
                        .IsUnique();

                    b.ToTable("SupportTeams");

                    b.HasData(
                        new
                        {
                            TeamID = 1,
                            Description = "General IT support and troubleshooting",
                            Specialization = "Hardware and Software Support",
                            TeamName = "IT Support"
                        },
                        new
                        {
                            TeamID = 2,
                            Description = "Network infrastructure and connectivity",
                            Specialization = "Network Infrastructure",
                            TeamName = "Network Team"
                        },
                        new
                        {
                            TeamID = 3,
                            Description = "Information security and compliance",
                            Specialization = "Cybersecurity",
                            TeamName = "Security Team"
                        },
                        new
                        {
                            TeamID = 4,
                            Description = "Business application support and maintenance",
                            Specialization = "Software Applications",
                            TeamName = "Application Support"
                        });
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.Ticket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketID"));

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TicketID");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.TicketTimeline", b =>
                {
                    b.Property<int>("TimelineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimelineID"));

                    b.Property<DateTime?>("ActualResolution")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedResolution")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TimelineID");

                    b.HasIndex("TicketID");

                    b.ToTable("TicketTimelines");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HashAlgorithm")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.HasIndex("TeamID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            ApprovedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "IT",
                            Email = "admin@omnitak.com",
                            FullName = "System Administrator",
                            HashAlgorithm = "SHA256",
                            IsActive = true,
                            IsApproved = true,
                            PasswordHash = "BlQnoXD9+ytdUwQ0KSML4/AMdkbno68/4jE9M3wSRB8=",
                            RoleID = 1,
                            TeamID = 1
                        });
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.AuditLog", b =>
                {
                    b.HasOne("OmnitakSupportHub.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.ChatMessage", b =>
                {
                    b.HasOne("OmnitakSupportHub.Models.Ticket", "Ticket")
                        .WithMany("ChatMessages")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OmnitakSupportHub.Models.User", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.Feedback", b =>
                {
                    b.HasOne("OmnitakSupportHub.Models.Ticket", "Ticket")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OmnitakSupportHub.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.KnowledgeBase", b =>
                {
                    b.HasOne("OmnitakSupportHub.Models.User", "CreatedByUser")
                        .WithMany("CreatedArticles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OmnitakSupportHub.Models.User", "LastUpdatedByUser")
                        .WithMany("UpdatedArticles")
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.PasswordReset", b =>
                {
                    b.HasOne("OmnitakSupportHub.Models.User", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.SupportTeam", b =>
                {
                    b.HasOne("OmnitakSupportHub.Models.User", "TeamLead")
                        .WithMany("LeadTeams")
                        .HasForeignKey("TeamLeadID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TeamLead");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.Ticket", b =>
                {
                    b.HasOne("OmnitakSupportHub.Models.User", "AssignedToUser")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OmnitakSupportHub.Models.User", "CreatedByUser")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OmnitakSupportHub.Models.SupportTeam", "Team")
                        .WithMany("Tickets")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedToUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.TicketTimeline", b =>
                {
                    b.HasOne("OmnitakSupportHub.Models.Ticket", "Ticket")
                        .WithMany("TicketTimelines")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.User", b =>
                {
                    b.HasOne("OmnitakSupportHub.Models.User", "ApprovedByUser")
                        .WithMany("ApprovedUsers")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("OmnitakSupportHub.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OmnitakSupportHub.Models.SupportTeam", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.SupportTeam", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.Ticket", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Feedbacks");

                    b.Navigation("TicketTimelines");
                });

            modelBuilder.Entity("OmnitakSupportHub.Models.User", b =>
                {
                    b.Navigation("ApprovedUsers");

                    b.Navigation("AssignedTickets");

                    b.Navigation("AuditLogs");

                    b.Navigation("ChatMessages");

                    b.Navigation("CreatedArticles");

                    b.Navigation("CreatedTickets");

                    b.Navigation("Feedbacks");

                    b.Navigation("LeadTeams");

                    b.Navigation("PasswordResets");

                    b.Navigation("UpdatedArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
